Hicimos un codigo para mover dos motores a la vez, 
unicamente como prueba para controlar un puente h(funciona):

#define ENA 9
#define ENB 10
#define IN1 3
#define IN2 4
#define IN3 5
#define IN4 6


int velocidad = 200;
void setup() {
 
  pinMode(IN1,OUTPUT);  pinMode(IN2,OUTPUT);  pinMode(ENA,OUTPUT);
  pinMode(IN3,OUTPUT);  pinMode(IN4,OUTPUT);  pinMode(ENB,OUTPUT);


}


void loop() {
  // put your main code here, to run repeatedly:
digitalWrite(IN1, HIGH);
digitalWrite(IN2, LOW);
digitalWrite(IN3, HIGH);
digitalWrite(IN4, LOW);
digitalWrite(ENA, velocidad);
digitalWrite(ENB, velocidad);
delay(3000);
digitalWrite(IN2, HIGH);
digitalWrite(IN1, LOW);
digitalWrite(IN4, HIGH);
digitalWrite(IN3, LOW);
digitalWrite(ENA, velocidad);
digitalWrite(ENB, velocidad);
delay(3000);
}

Hicimos un codigo para mover esos mismos motores pero basados en un input del usuario temporal, una serie
de botones. La idea es hacer la estructura de los condicionales, luego estas instrucciones haremos que 
lleguen de una computadora por el puerto serial (probar si funciona en un modelo L293N):

int velocidad = 200;
int boton1 = 0;
int boton2 = 0;
int boton3 = 0;
int boton4 = 0;
#define ENA 9
#define ENB 10
#define IN1 3
#define IN2 4
#define IN3 5
#define IN4 6


void setup() {
 Serial.begin(9600);
//Esto está puesto con pullup para aumentar la fiabilidad de la lectura, 
//pero hace que la logica se invierte(cuando esta presionado es 0 pero cuando no lo esta es 1) *CUIDADO*
 pinMode(8, INPUT_PULLUP); 
 pinMode(11,INPUT_PULLUP); 
 pinMode(12,INPUT_PULLUP); 
 pinMode(13,INPUT_PULLUP); 
 //en cambio, la logica de esto es *normal*
 pinMode(3, OUTPUT); 
 pinMode(4,OUTPUT); 
 pinMode(9,OUTPUT);
 pinMode(5,OUTPUT); 
 pinMode(6,OUTPUT); 
 pinMode(10,OUTPUT);




}




void loop() {
  // put your main code here, to run repeatedly:
  boton1 = digitalRead(8);
  boton2 = digitalRead(11);
  boton3 = digitalRead(12);
  boton4 = digitalRead(13);
  
  if (boton1 == 0){
   analogWrite(9, velocidad);
   digitalWrite (IN1,HIGH);
   digitalWrite (IN2,LOW);
   Serial.println ("motor 1 contra-reloj");
  }
  
  else if (boton2 == 0){
   analogWrite(9, velocidad);
   digitalWrite(IN2, HIGH);
   digitalWrite(IN1, LOW);
   Serial.println ("motor 1 reloj");
  }
  
  else if (boton3 == 0){
   analogWrite(10, velocidad);
   digitalWrite (IN3,HIGH);
   digitalWrite (IN4,LOW);
   Serial.println ("motor 2 contra-reloj");
  }
  
  else if (boton4 == 0){
   analogWrite(10, velocidad);
   digitalWrite(IN4, HIGH);
   digitalWrite (IN3,LOW);
   Serial.println ("motor 2 reloj");
  } 
  else {
    digitalWrite(3,LOW);
    digitalWrite(4,LOW);
    digitalWrite(5,LOW);
    digitalWrite(6,LOW);
    digitalWrite(9,LOW);
    digitalWrite(10,LOW);
  }
  
  
  delay(100);
}

Bien, vamos a tener que programar ahora como va a doblar el auto EN BASE A LOS INPUTS DEL PUERTO SERIAL, no de
botones, pero la base es la misma. El auto va a tener dos motores, uno en cada rueda trasera, y para doblar va 
desactivar uno y activar otro, algo asi como los tanques, que giran sobre su propio eje. Ademas, hicimos 
sistema que va a enviar los datos que registran los sensores de flexión 
Codigo:

//movimiento de motor
#define ENA 9
#define ENB 10
#define IN1 3
#define IN2 4
#define IN3 5
#define IN4 6
int velocidad = 200;

//detección de dedos
#define sens1 A0
#define sens2 A1
#define sens3 A2
#define sens4 A3

int dedo1 = 0;
int dedo2 = 0;
int dedo3 = 0;
int dedo4 = 0;

String orden = "";

void setup () {
 //movimiento de motor
 pinMode(3, OUTPUT); 
 pinMode(4,OUTPUT); 
 pinMode(9,OUTPUT);
 pinMode(5,OUTPUT); 
 pinMode(6,OUTPUT); 
 pinMode(10,OUTPUT);
 Serial.begin (9600);
 //detección de dedos
 pinMode(sens1, INPUT);
 pinMode(sens2,INPUT);
 pinMode(sens3,INPUT);
 pinMode(sens4,INPUT);
}

void loop () {
  //detección de dedos:

  //los dedos envian por puerto analogico un valor, en cuanto mas alto, mas flexionado el dedo
  //vamos a enviar esos datos al back end quien tiene que interpretarlos y enviar la "orden"
  dedo1 = analogRead(sens1);
  dedo2 = analogread(sens2);
  dedo3 = analogRead(sens3);
  dedo4 = analogRead(sens4);
  if(dedo1 > 0) {
    SerialPrintIn("dedo menique = " dedo1);
  }

  if(dedo2 > 0) {
    SerialPrintIn("dedo anular = " dedo 2);
  }

  if(dedo3 > 0) {
    SerialPrintIn("Dedo mayor = " dedo3):
  }

  if(dedo4 > 0) {
    SerialPrintIn("dedo indice = " dedo 4);
  }

  //movimiento de motores:
  if (Serial.available () > 0) {
    orden = Serial.readString();
    if (orden == "Adelante") { //los motores tienen que ir a contra-reloj
      digitalWrite(IN1, HIGH);
      digitalWrite(IN2, LOW);
      analogWrite(ENA, velocidad);
      analogWrite(ENB, velocidad);
      digitalWrite(IN3, HIGH);
      digitalWrite(IN4, LOW);
      SerialPrintIn("adelante");
    }
    //ENB está del lado derecho del puente h y ENA está del lado izquierdo (mirando desde el lado donde estan los IN y VCC)
    if (orden == "Izquierda") {
      analogWrite(ENA, 0);
      analogWrite(ENB, velocidad);
      digitalWrite(IN3, HIGH);
      digitalWrite(IN4 , LOW);
      SerialPrintIn("izquierda");
    }

    if (orden == "Derecha") {
      analogWrite(ENB, 0);
      analogWrite(ENA, velocidad);
      digitalWrite(IN1, HIGH);
      digitalWrite(IN2, LOW);
      SerialPrintIn("derecha");
    }

    if (orden == "Atras") {
      analogWrite(ENA, velocidad);
      analogWrite(ENB, velocidad);
      digitalWrite(IN2, HIGH);
      digitalWrite(IN4, HIGH);
      digitalWrite(IN1, LOW);
      digitalWrite(IN3, LOW);
      SerialPrintIn("atras");
    }
    //estos de aca es para que el auto pueda doblar yendo en reversa, es lo mismo que los de derecha e izquierda
    //pero con los IN1 e IN2, IN3 e IN4 invertidos
    if (orden == "Izquierda r") {
      analogWrite(ENA, 0);
      analogWrite(ENB, velocidad);
      digitalWrite(IN3, LOW);
      digitalWrite(IN4 , HIGH);
      SerialPrintIn("izquierda r");
    }
    if (orden == "Derecha r") {
      analogWrite(ENB, 0);
      analogWrite(ENA, velocidad);
      digitalWrite(IN1, LOW);
      digitalWrite(IN2, HIGH);
      SerialPrintIn("derecha r");
    }
    else {
      analogWrite(ENA, 0);
      analogWrite(ENB, 0);
    }
    
  }
  
}